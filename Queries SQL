#Query 1 importation of tables in the data summary 
Movie table 
CREATE TABLE movie ( 
    movie_id INTEGER PRIMARY KEY, 
    release_date TEXT, 
    genre TEXT 
); 

Review table 
CREATE TABLE review ( 
    review_id VARCHAR PRIMARY KEY, 
    metascore INTEGER, 
    userscore INTEGER, 
    rating TEXT 
); 

Boxoffice table 
CREATE TABLE boxoffice ( 
    boxoffice_id SERIAL PRIMARY KEY, 
    domestic_box_office INTEGER, 
    opening_weekend INTEGER, 
    title VARCHAR 
);


#Query 2: create the foreign key to show the relationship between the tables 
#boxoffice table  

ALTER TABLE boxoffice 
ADD CONSTRAINT fk_movie_id 
FOREIGN KEY (movie_id)  
REFERENCES movie(movie_id); 

#Review table 

ALTER TABLE review 
ADD CONSTRAINT fk_review_id 
FOREIGN KEY (review_id)  
REFERENCES movie(review_id);


#Query 3: 

ALTER TABLE movie 
ADD COLUMN months TEXT, 
ADD COLUMN days INTEGER; 

#we will be splitting the column release_dates to movie and days 

UPDATE movie 

SET months = SPLIT_PART(release_date, ' ', 1), 

    days = CAST(SPLIT_PART(release_date, ' ', 2) AS INTEGER);


# Query 4
Q1: 
ALTER TABLE movie 
ADD COLUMN months_integer INTEGER; 

Q2: 
UPDATE movie 
SET months_integer = CASE  
    WHEN months = 'January' THEN 1 
    WHEN months = 'February' THEN 2 
    WHEN months = 'March' THEN 3 
    WHEN months = 'April' THEN 4 
    WHEN months = 'May' THEN 5 
    WHEN months = 'June' THEN 6 
    WHEN months = 'July' THEN 7 
    WHEN months = 'August' THEN 8 
    WHEN months = 'September' THEN 9 
    WHEN months = 'October' THEN 10 
    WHEN months = 'November' THEN 11 
    WHEN months = 'December' THEN 12 
    ELSE NULL 
END;

#query 5
CREATE TABLE boxoffice_review ( 

    box_review_id SERIAL PRIMARY KEY, 

    movie_id INTEGER, 

    boxoffice_id INTEGER, 

    review_id VARCHAR, 

    FOREIGN KEY (movie_id) REFERENCES movie(movie_id), 

    FOREIGN KEY (boxoffice_id) REFERENCES boxoffice(boxoffice_id), 

    FOREIGN KEY (review_id) REFERENCES review(review_id) 

);

# Query 6:  
#Task 1: we will be answering research questions 1
#Which release months generate the highest average domestic box office revenue?
SELECT  
    CASE  
        -- February: February 7 to February 14 
        WHEN m.months = 2 AND m.days BETWEEN 7 AND 14 THEN 'February' 
        -- October: October 25 to October 31 
        WHEN m.months = 10 AND m.days BETWEEN 25 AND 31 THEN 'October' 
        -- December: December 21 to December 30 
        WHEN m.months = 12 AND m.days BETWEEN 21 AND 30 THEN 'December' 
        -- Non-peak season: Any other day 
        ELSE 'Non-Peak Season' 
    END AS season, 
    AVG(b.domestic_box_office) AS average_domestic_box_office 
FROM  
    boxoffice b 
JOIN  
    movie m ON b.movie_id = m.movie_id 
GROUP BY  
    season 
ORDER BY  
    average_domestic_box_office DESC;

# Query 7:  
# Task 1:is used to answer the research question number 2:
 
SELECT  
    CASE  
        -- Valentine's Day: February 7 to February 14 
        WHEN m.months = 2 AND m.days BETWEEN 7 AND 14 THEN 'Valentines Day' 
        -- Halloween: October 25 to October 31 
        WHEN m.months = 10 AND m.days BETWEEN 25 AND 31 THEN 'Halloween' 
        -- Christmas: December 21 to December 30 
        WHEN m.months = 12 AND m.days BETWEEN 21 AND 30 THEN 'Christmas' 
        -- Non-peak season: Any other day 
        ELSE 'Non-Peak Season' 
    END AS season, 
    AVG(b.opening_weekend) AS average_opening_weekend 
FROM  
    boxoffice b 
JOIN  
    movie m ON b.movie_id = m.movie_id 
GROUP BY  
    season 
ORDER BY  
    average_opening_weekend DESC;

#QUERY 8
#Task: we will be answering the research question number 3, by finding the correlation of userscore and the domestic box office 

#What is the correlation between user reviews (userscore) and the domestic box office revenue for movies ? 

 

SELECT corr(r.userscore, b.domestic_box_office) AS correlation 

FROM boxoffice_review m 

JOIN review r ON m.movie_id = r.movie_id 

JOIN boxOffice b ON m.movie_id = b.movie_id;



#QUERY 9
#Task:  we will be  answering the research question number 4 by finding the correlation of metascore and the domestic box office 
SELECT corr(r.metascore, b.domestic_box_office) AS correlation 
FROM boxoffice_review m 
JOIN review r ON m.movie_id = r.movie_id 
JOIN boxOffice b ON m.movie_id = b.movie_id;
