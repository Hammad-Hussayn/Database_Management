# Query 1:  
#Task 1: Firstly we will be using the pip install for panda, psyopg2 and matplotlib for plots and statistical analysis.
# Code: 
pip install sqlalchemy psycopg2 pandas 
pip install matplotlib 
pip install scipy 
import psycopg2 
import pandas as pd 
import numpy as np 
from scipy.stats import pearsonr 
import matplotlib.pyplot as plt

#Query 2:  
#Task 1: This query will be answering a research question 1 and displaying a plot.  
#Code: 
import psycopg2 
import pandas as pd 
conn = psycopg2.connect( 
    host="localhost",         
    database="postgres",       
    user="postgres",           
    password="12345"          
) 
query = """ 
SELECT  
    CASE  
        -- February: February 7 to February 14 
        WHEN m.months = 2 AND m.days BETWEEN 7 AND 14 THEN 'February' 
        -- October: October 25 to October 31 
        WHEN m.months = 10 AND m.days BETWEEN 25 AND 31 THEN 'October' 
        -- December: December 21 to December 30 
        WHEN m.months = 12 AND m.days BETWEEN 21 AND 30 THEN 'December' 
        -- Non-peak season: Any other day 
        ELSE 'Non-Peak Season' 
    END AS season, 
    AVG(b.domestic_box_office) AS average_domestic_box_office 
FROM  
    boxoffice b 
JOIN  
    movie m ON b.movie_id = m.movie_id 
GROUP BY  
    season 
ORDER BY  
    average_domestic_box_office DESC; 
""" 
# Load the data into a pandas DataFrame 

df = pd.read_sql(query, conn) 
# Close the database connection 
conn.close() 

print(df) 

import matplotlib.pyplot as plt 

# Plot the data 
plt.figure(figsize=(10, 6)) 
plt.bar(df['season'], df['average_domestic_box_office'], color='skyblue') 
plt.xlabel('Season') 
plt.ylabel('Average Domestic Box Office') 
plt.title('Average Domestic Box Office Revenue by Season') 
plt.xticks(rotation=45)  # Rotate labels for readability 
plt.show() 


#Query 3:  
#Tasks 1: will be answering research questions 2 finding which month has the highest opening weekend 
#Code: 

import psycopg2 
import pandas as pd 
# Connect to your PostgreSQL database (adjust connection settings as needed) 

conn = psycopg2.connect( 
    host="localhost",         
    database="postgres",       
    user="postgres",          
    password="12345"           
) 
# Query to calculate the average box office revenue grouped by months 
query = """ 
SELECT  
    CASE  
        -- Valentine's Day: February 7 to February 14 
        WHEN m.months = 2 AND m.days BETWEEN 7 AND 14 THEN 'February' 
        -- October: October 25 to October 31 
        WHEN m.months = 10 AND m.days BETWEEN 25 AND 31 THEN 'October' 
        -- December: December 21 to December 30 
        WHEN m.months = 12 AND m.days BETWEEN 21 AND 30 THEN 'December' 
        -- Non-peak season: Any other day 
        ELSE 'Non-Peak Season' 
    END AS season, 
    AVG(b.opening_weekend) AS average_opening_weekend 
FROM  
    boxoffice b 
JOIN  
    movie m ON b.movie_id = m.movie_id 
GROUP BY  
    season 
ORDER BY  
    average_opening_weekend DESC; 
""" 
df = pd.read_sql(query, conn) 
conn.close() 
print(df) 
import matplotlib.pyplot as plt 
# Plot the data 
plt.figure(figsize=(10, 6)) 
plt.bar(df['season'], df['average_opening_weekend'], color='skyblue') 
plt.xlabel('Season') 
plt.ylabel('Average opening weekend') 
plt.title('Average opening weekend Revenue by Season') 
plt.xticks(rotation=45)  # Rotate labels for readability 
plt.show()

# Query 4:  
# Tasks 1: will be answering research questions 3 finding the correlation between userscore and box office 
# Code: 
pip install sqlalchemy psycopg2 pandas 
pip install matplotlib 
pip install scipy 
import psycopg2 
import pandas as pd 
import numpy as np 
from scipy.stats import pearsonr 
import matplotlib.pyplot as plt 

# Connect to your PostgreSQL database (adjust connection settings as needed) 
conn = psycopg2.connect( 
    host="localhost",          
    database="postgres",       
    user="postgres",           
    password="12345"           
) 

# Query to retrieve user score and box office revenue for each movie 
query = """ 
SELECT  
    r.userscore, 
    b.domestic_box_office 
FROM  
    review r 
JOIN  
    boxoffice b ON r.movie_id = b.movie_id 
WHERE  
    r.userscore IS NOT NULL 
    AND b.domestic_box_office IS NOT NULL; 
""" 

# Load the data into a pandas DataFrame 
df = pd.read_sql(query, conn) 
# Close the database connection 
conn.close() 
 
# Display the data 
print(df) 

# Calculate the correlation using Pearson's correlation coefficient 
correlation, p_value = pearsonr(df['userscore'], df['domestic_box_office']) 
print(f"Pearson Correlation Coefficient: {correlation}") 
print(f"P-value: {p_value}") 

# Plot the data to visualize the relationship between UserScore and Domestic Box Office 
plt.figure(figsize=(10, 6)) 
plt.scatter(df['userscore'], df['domestic_box_office'], color='blue') 
plt.title('Correlation between userscore and Domestic Box Office') 
plt.xlabel('userscore') 
plt.ylabel('Domestic Box Office') 
plt.grid(True) 
plt.show()

#Query 5:
#Tasks 1: will be answering research questions 4 finding the correlation between metascore and box office
#Code:
pip install sqlalchemy psycopg2 pandas
pip install matplotlib
pip install scipy

import psycopg2
import pandas as pd
import numpy as np
from scipy.stats import pearsonr
import matplotlib.pyplot as plt

conn = psycopg2.connect(
    host="localhost",         
    database="postgres",      
    user="postgres",          
    password="12345"          
)

# Query to retrieve user score and box office revenue for each movie
query = """
SELECT 
    r.metascore,
    b.domestic_box_office
FROM 
    review r
JOIN 
    boxoffice b ON r.movie_id = b.movie_id
WHERE 
    r.metascore IS NOT NULL
    AND b.domestic_box_office IS NOT NULL;
"""

df = pd.read_sql(query, conn)
conn.close()
# Display the data
print(df)
# Calculate the correlation using Pearson's correlation coefficient
correlation, p_value = pearsonr(df['metascore'], df['domestic_box_office'])

print(f"Pearson Correlation Coefficient: {correlation}")
print(f"P-value: {p_value}")

# Plot the data to visualize the relationship between UserScore and Domestic Box Office
plt.figure(figsize=(10, 6))
plt.scatter(df['metascore'], df['domestic_box_office'], color='blue')
plt.title('Correlation between metascore and Domestic Box Office')
plt.xlabel('metascore')
plt.ylabel('Domestic Box Office')
plt.grid(True)
plt.show()


#Query 6:
#Tasks 1: will be finding the regression analysis using python 
#Code:
import psycopg2
import pandas as pd
import statsmodels.api as sm

# Connect to your PostgreSQL database (adjust connection settings as needed)
conn = psycopg2.connect(
    host="localhost",         # Replace with your actual host
    database="postgres",      # Replace with your actual database name
    user="postgres",          # Replace with your actual username
    password="12345"          # Replace with your actual password
)

# Query to retrieve data for regression
query = """
SELECT 
    CASE 
        WHEN m.months= 2 AND m.days BETWEEN 7 AND 14 THEN 1
        WHEN m.months= 10 AND m.days BETWEEN 25 AND 31 THEN 1
        WHEN m.months= 12 AND m.days BETWEEN 21 AND 30 THEN 1
        ELSE 0
    END AS holiday_season,
    b.domestic_box_office,
    b.opening_weekend,
    r.userscore,
    r.metascore
FROM 
    movie m
JOIN 
    boxoffice b ON m.movie_id = b.movie_id
JOIN 
    review r ON m.movie_id = r.movie_id
WHERE 
    b.domestic_box_office IS NOT NULL
    AND r.userscore IS NOT NULL
    AND r.metascore IS NOT NULL;
"""
# Load the data into a pandas DataFrame
df = pd.read_sql(query, conn)
conn.close()
X = df[['holiday_season', 'userscore', 'metascore']]  
y = df['domestic_box_office']  # Dependent variable
# Add a constant to the predictor variable for the intercept term
X = sm.add_constant(X)
# Fit the regression model
model = sm.OLS(y, X).fit()
# Print the summary of the regression
print(model.summary())
